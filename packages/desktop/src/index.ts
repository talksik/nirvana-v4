import { BrowserWindow, Display, app, ipcMain, screen, systemPreferences } from 'electron';
import Channels, { DEFAULT_APP_PRESET, DimensionChangeRequest } from './electron/constants';

import { environmentVariables } from './electron/config';
import { handleGoogleLogin } from './electron/handleLogin';
import store from './electron/store';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

console.log(`is production ${app.isPackaged}`);
console.log(`variables loaded`, environmentVariables);

if (process.env.NODE_ENV)
  if (require('electron-squirrel-startup')) {
    // Handle creating/removing shortcuts on Windows when installing/uninstalling.
    // eslint-disable-line global-require
    app.quit();
  }

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
export let browserWindow: BrowserWindow;

let display: Display;

const createWindow = (): void => {
  // Create the browser window.
  browserWindow = new BrowserWindow({
    ...DEFAULT_APP_PRESET,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    // titleBarStyle: "hiddenInset",
    frame: false,
    roundedCorners: true,
  });

  // and load the index.html of the app.
  browserWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  browserWindow.webContents.openDevTools({ mode: 'detach' });

  display = screen.getPrimaryDisplay();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app
  .whenReady()
  .then(createWindow)
  .then(() => {
    // access storage/cookies
    ipcMain.on('electron-store-set', async (event, key, val) => {
      store.set(key, val);
    });
    ipcMain.handle('electron-store-get', async (event, val) => {
      const result = await store.get(val);
      return result;
    });

    // activate login
    ipcMain.on(Channels.ACTIVATE_LOG_IN, async (event, arg) => {
      console.log('initiating log in');
      await handleGoogleLogin();
    });

    ipcMain.on(Channels.ASK_MICROPHONE_PERMISSIONS, async () => {
      console.log('asking for user microphone');
      systemPreferences.askForMediaAccess('microphone');
    });
  })
  .then(() => {
    // dynamically changing the window bounds
    ipcMain.on(Channels.RESIZE_WINDOW, (event, req: DimensionChangeRequest) => {
      if (req.setAlwaysOnTop) {
        browserWindow.setAlwaysOnTop(true, 'floating');
      } else {
        browserWindow.setAlwaysOnTop(false);
      }

      if (req.addDimensions) {
        const currentDimensions = browserWindow.getSize();
        browserWindow.setSize(
          currentDimensions[0] + req.dimensions.width,
          currentDimensions[1] + req.dimensions.height,
          false,
        );
      } else {
        browserWindow.setSize(req.dimensions.width, req.dimensions.height, false);
      }

      if (req.setPosition) {
        if (req.setPosition === 'center') {
          browserWindow.center();
        }

        if (req.setPosition === 'topRight') {
          browserWindow.setPosition(display.bounds.width - req.dimensions.width, 0);

          console.log(display.bounds);
        }
      }
    });

    // globalShortcut.register("`", () => {
    //   console.log("Electron loves global shortcuts!");
    // });

    // on blur, show overlay, and tell app to trigger overlay mode
    browserWindow.on('blur', () => {
      browserWindow.webContents.send(Channels.ON_WINDOW_BLUR);
    });

    browserWindow.on('focus', () => {
      browserWindow.webContents.send(Channels.ON_WINDOW_FOCUS);
    });
  });

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
